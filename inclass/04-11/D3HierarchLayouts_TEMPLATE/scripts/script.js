// Define the dimensions of the space that will contain the hierarhy
const width = 700;
const height = 380;

const svg = d3.select("#chart")
    .append("svg")
    .attr("width", width)
    .attr("height", height);

// Output: Promise object
//          .then() callback function to actually turn it into JSON structure

let fileName = "/inclass/04-11/D3HierarchLayouts_TEMPLATE/data/films.json";

d3.json(fileName).then(function(results){

    // Once the data is loaded, everything happens inside the createHierarchy() function
    createHierarchy(results);

});

//

function createHierarchy(data) {

    /**
     *  The following lines of code handle the ABSTRACT DATA STRUCTURE
     *  of a hierarchy. No visualization-specific methods are used.
     */

    let groups = d3.rollup(data, function(d) { return d.length; },
                                 function(d) { return d.Distributor; },
                                 function(d) { return d.Genre; }
                                //  function(d) { return d.Rating; }
    );

    // console.log(groups);

    let root = d3.hierarchy(groups);

    // console.log(root);
    
    /**
     * If you're passing the output of d3.rollup into d3.hierarchy, the accessor 
     * function will usually return d[1] which is the rolled up value generated by d3.rollup.
     */
    root.sum(function(d) {
        return d[1];
    });

    /**
     *  The following lines of code handle HIERARCHICAL LAYOUT-SPECIFIC methods.
     */

    let treeLayout = d3.tree()
    .size([width, height - 50]);
    
    treeLayout(root);

    // TO DO

    /**
     *  The following lines of code handle VISUALIZATION-SPECIFIC methods.
     */

    // TO DO

    // line of the tree
    svg.append("g")
        .selectAll('line')
        .data(root.links())
        .join('line')
        // coordinates of start of line
        .attr('x1', function(d) {return d.source.x;})
        .attr('y1', function(d) {return d.source.y;})
        .style("stroke-width", 6)
        // coordinates of end of line
        .attr('x2', function(d) {return d.target.x;})
        .attr('y2', function(d) {return d.target.y;});

    
        // node of the tree, connected by the lines
    svg.append("g")
        .selectAll('circle')
        .data(root.descendants())
        .join('circle')
            .attr('cx', function(d) {return d.x;})
            .attr('cy', function(d) {return d.y;})
            .attr('r', 8);

        // add text for nodes/circles
        svg.append("g")
        // .selectAll('text.label')
        .data(root.descendants())
        .classed('label', true)
        .join('text')
            .attr('x', function(d) {return d.x;})
            .attr('y', function(d) {return d.y - 15;})
            .text(function(d) {
                return d.data[0];
        });

        // count labels
        svg.append("g")
        .selectAll("text.count-label")
        .data(root.descendants())
        .classed("count-label", true)
        .join("text")
            .attr('x', function(d) {return d.x;})
            .attr('y', function(d) {return d.y + 40;})
            .text(function(d) {
                if (d.height > 0) return '';
                return d.data[1];
        });

}
